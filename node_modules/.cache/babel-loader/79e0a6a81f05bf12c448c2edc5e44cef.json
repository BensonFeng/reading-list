{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { db } from \"../firebase/config\";\nimport { collection, onSnapshot } from \"firebase/firestore\";\nexport const useCollection = c => {\n  _s();\n\n  const [documents, setDocuments] = useState(null);\n  useEffect(() => {\n    let ref = collection(db, c);\n    const unsub = onSnapshot(ref, snapshot => {\n      const results = [];\n      snapshot.docs.forEach(doc => {\n        results.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      setDocuments(results);\n    });\n    return () => unsub();\n  }, [c]);\n};\n\n_s(useCollection, \"MoFY8yYWn2WM9U7UnevbSK7KOkw=\");","map":{"version":3,"sources":["C:/Users/Dickson/Desktop/reading-list/src/hooks/useCollection.js"],"names":["useState","useEffect","db","collection","onSnapshot","useCollection","c","documents","setDocuments","ref","unsub","snapshot","results","docs","forEach","doc","push","data","id"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,EAAT,QAAmB,oBAAnB;AAEA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,oBAAvC;AAEA,OAAO,MAAMC,aAAa,GAAIC,CAAD,IAAO;AAAA;;AAClC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,GAAG,GAAGN,UAAU,CAACD,EAAD,EAAKI,CAAL,CAApB;AAEA,UAAMI,KAAK,GAAGN,UAAU,CAACK,GAAD,EAAOE,QAAD,IAAc;AAC1C,YAAMC,OAAO,GAAG,EAAhB;AACAD,MAAAA,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAuBC,GAAD,IAAS;AAC7BH,QAAAA,OAAO,CAACI,IAAR,CAAa,EAAE,GAAGD,GAAG,CAACE,IAAJ,EAAL;AAAiBC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAzB,SAAb;AACD,OAFD;AAGAV,MAAAA,YAAY,CAACI,OAAD,CAAZ;AACD,KANuB,CAAxB;AAOA,WAAO,MAAMF,KAAK,EAAlB;AACD,GAXQ,EAWN,CAACJ,CAAD,CAXM,CAAT;AAYD,CAdM;;GAAMD,a","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase/config\";\r\n\r\nimport { collection, onSnapshot } from \"firebase/firestore\";\r\n\r\nexport const useCollection = (c) => {\r\n  const [documents, setDocuments] = useState(null);\r\n  useEffect(() => {\r\n    let ref = collection(db, c);\r\n\r\n    const unsub = onSnapshot(ref, (snapshot) => {\r\n      const results = [];\r\n      snapshot.docs.forEach((doc) => {\r\n        results.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      setDocuments(results);\r\n    });\r\n    return () => unsub();\r\n  }, [c]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}